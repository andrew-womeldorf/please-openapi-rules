"""Rules to build work with OpenAPI Specifications
"""

_DEFAULT_OPENAPI_LABELS = ["openapi"]

def openapi_generate(name: str, srcs: list, spec: str, generator: str, config: str=None, extra_flags: list=[], out_dirs: list=None, labels:list&features&tags=[], visibility: list=["PUBLIC"]):
    """Generate code to various langauges from an OpenAPI Spec.

    Args:
      name (str): Name of the rule.
      srcs (list): Input spec file.
      spec (str): Name of the file that serves as the entrypoint.
      generator (str): Name of the generator to use.
      config (str): Name of the config file to use.
      extra_flags (list): Additional flags to pass to the tool.
      out_dir (str): Use if the generated output you need is in a subdirectory.
      visibility (list): Visibility specification for the rule.
    """

    flags = [
        f"--input-spec $(location {spec})",
        f"--generator-name {generator}",
        f"--output _out",
    ]

    if config:
        flags += [f"--config $(location {config})"]

    flags = ' '.join(flags + extra_flags)

    output_dirs = ["_out"]
    if out_dirs:
        output_dirs = [f"_out/{d}" for d in out_dirs]

    return genrule(
        name = name,
        srcs = srcs,
        cmd = [
            f"java -jar $TOOLS_GENERATOR generate {flags}"
        ],
        output_dirs = output_dirs,
        tools = {
            "generator": CONFIG.OPENAPI.GENERATOR_TOOL,
        },
        labels = labels + _DEFAULT_OPENAPI_LABELS,
        visibility = visibility,
    )
